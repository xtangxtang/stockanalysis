{
    "contents" : "setwd(\"C:\\\\xtang\\\\workspace\\\\mystockAnalysis\")\nlibrary(quantmod)\nlibrary(TTR)\nlibrary(plyr)\n\nlibrary(xlsx)\nlibrary(XLConnect)\nlibrary(scales)\nlibrary(sqldf)\n\nheader <- c(\"日期\",\"代码\",\"名称\",\"最新\",\"涨幅%\",\"主力净流入\",\"净买率\",\"集合竞价\",\"超大单流入\",\"超大单流出\",\"超大单净额\",\"超大单净占比%\",\"大单流入\",\"大单流出\",\"大单净额\",\"大单净占比%\",\"中单流入\",\"中单流出\",\"中单净额\",\"中单净占比%\",\"小单流入\",\"小单流出\",\"小单净额\",\"小单净占比%\")\ndailyCapOrigHeader <- c(\"日期\",\"代码\",\"名称\",\"最新\",\"涨幅%\",\"主力净流入\",\"集合竞价\",\"超大单流入\",\"超大单流出\",\"超大单净额\",\"超大单净占比%\",\"大单流入\",\"大单流出\",\"大单净额\",\"大单净占比%\",\"中单流入\",\"中单流出\",\"中单净额\",\"中单净占比%\",\"小单流入\",\"小单流出\",\"小单净额\",\"小单净占比%\")\n\n#公共方法，在data.frame中加入一行\ninsertRow <- function(existingDF, newrow, r,newRowName) {\n  if (r <= nrow(existingDF)) {\n    existingDF[seq(r+1,nrow(existingDF)+1),] <- existingDF[seq(r,nrow(existingDF)),]\n    existingDF[r,] <- newrow\n    row.names(existingDF[r,]) <- newRowName    \n  } else if (r == (nrow(existingDF)+1)){\n    existingDF[r,] <- newrow\n    row.names(existingDF[r,]) <- newRowName  \n  }\n\n  return(existingDF)\n}\n\naddOneColToDF <- function(oldDF,colName=\"\",newdata,newColName=\"\") {\n  exists <- which(names(oldDF)==newColName)[1]\n  if(length(exists)!=0) {\n    #print(paste(\"WARNING:the col\",newColName,\"already exsits in\",names(oldDF)))\n    return\n  }\n  \n  bspot <- which(names(oldDF)==colName)[1]\n  newDF<-data.frame(oldDF[1:bspot],colName=newdata,oldDF[(bspot+1):ncol(oldDF)])\n  colnames(newDF)[bspot+1] <- newColName;\n  return(newDF)\n}\n\n#根据日期打开当天的资金流向文件\nopenCapitalFile <- function(date) {\n  dailyFile <- paste(\".\\\\capital\\\\daily\\\\\",date,\".xlsx\",sep=\"\")\n  tryCatch({\n    dailyCapital <- read.xlsx2(dailyFile,sheetIndex=1,startRow=3,header=FALSE, encoding=\"UTF-8\",colClasses=c(\"Date\",\"character\",\"character\",rep(\"numeric\", 20)),  stringsAsFactors=FALSE)\n    #   print(paste(\"-----------dailyCapital-------------\",date))\n    #   print(head(dailyCapital))\n    #   print(\"-----------dailyCapital-------------\")  \n    dailyCapital[,1] <- as.Date(date)\n    colnames(dailyCapital) <- dailyCapOrigHeader\n    #   dailyCapital <- dailyCapital[,-25]\n    #   dailyCapital <- dailyCapital[,-24]  \n    #   print(paste(\"-----------dailyCapital-------------\",date))\n    #   print(head(dailyCapital))\n    #   print(\"-----------dailyCapital-------------\")\n    dailyCapital <- addOneColToDF(dailyCapital,\"主力净流入\",c(0),\"净买率\")\n    #   print(paste(\"-----------dailyCapital-------------\",date))\n    #   print(head(dailyCapital))\n    #   print(\"-----------dailyCapital-------------\")  \n    return(dailyCapital)    \n  }, warning = function(w) {\n    msg <- paste(\"get warning:\",w$message,\"for\",fileName)\n    print(msg)\n    return(NULL)\n  }, error = function(e) {\n    print(paste(\"ERROR:\",e$message))\n    return(NULL)\n  }, finally = {\n    \n  })\n  \n\n}\n\n#根据日期打开当天的交易文件\nopenHSADailyTradeFile <- function(date) {\n  dailyFile <- paste(\".\\\\market\\\\daily\\\\\",date,\".xlsx\",sep=\"\")\n  tryCatch({\n    dailyTrade <- read.xlsx2(dailyFile, sheetIndex=1,header=TRUE,encoding=\"UTF-8\",colClasses=c(\"Date\",\"character\",\"character\",rep(\"numeric\", 3),rep(\"integer\",2),rep(\"numeric\", 2),\"integer\",rep(\"numeric\", 9),rep(\"integer\",2),\"character\",rep(\"numeric\", 2)), keepFormulas=FALSE, stringsAsFactors=FALSE)  \n    dailyTrade[,1] <- as.Date(date)\n    return(dailyTrade)    \n  }, warning = function(w) {\n    msg <- paste(\"get warning:\",w$message,\"for\",fileName)\n    print(msg)\n    return(NULL)\n  }, error = function(e) {\n    print(paste(\"ERROR:\",e$message))\n    return(NULL)\n  }, finally = {\n    \n  })\n}\n\n\n\n#将某天的全部资金流向文件中的数据，写入到个股的资金流向文件中去\nuniqueCapColClasses <- c(\"Date\",\"character\",\"character\",rep(\"numeric\", 30))\nwriteToUniqueCapital <- function(dailyCapital) {\n  dailyCapital <- na.omit(dailyCapital)\n  date <- dailyCapital[1,1]\n  colnames(dailyCapital)[1]=\"日期\"\n  \n  for(i in 1:nrow(dailyCapital)) {\n  #for(i in 1:1) {\n    path <- getWd()\n    fileName <- paste(path,\"\\\\capital\\\\unique\\\\\",dailyCapital[i,2],\".xlsx\",sep=\"\")    \n    result = tryCatch({\n      uniqueFile <- read.xlsx2(fileName,sheetIndex=1,header=TRUE, encoding=\"UTF-8\",colClasses=uniqueCapColClasses, stringsAsFactors=FALSE,colIndex=(1:24))\n#       print(paste(\"-------------get file------------\",fileName))\n#       print(uniqueFile)\n#       print(\"-----------------------------------\")\n      \n      exist <- which(uniqueFile$日期 == date)\n      if(length(exist)!=0) {\n        print(paste(\"WARNING:get the same date \",date,\" for \",fileName,sep=\"\"))\n        next;\n      }\n      colnames(uniqueFile) <- header\n      data<-dailyCapital[i,]\n#      data <- addOneColToDF(dailyCapital[i,],\"主力净流入\",c(0),\"净买率\")\n#       print(\"-----------data-----------------\")\n#       print(data)\n#       print(\"-----------------------------------\")      \n#       uniqueFile <- uniqueFile[,-24]\n#       uniqueFile <- uniqueFile[,-24]\n      uniqueFile <- insertRow(uniqueFile,data,nrow(uniqueFile)+1,as.character(nrow(uniqueFile)))\n      uniqueFile <- uniqueFile[,-length(uniqueFile)]\n#       print(paste(\"-----------update file -----------------\",fileName))\n#       print(length(uniqueFile[i,]))\n#       print(uniqueFile)\n#       print(\"-----------------------------------\")\n      write.xlsx2(uniqueFile,fileName,row.names=FALSE,append=FALSE,colClasses=uniqueCapColClasses,colIndex=c(1:24),encoding=\"UTF-8\")\n      msg <- paste(\"update file \",fileName,\" with \",data[1,1],\" data\",sep=\"\")\n      print(msg)\n    }, warning = function(w) {\n      msg <- paste(\"get warning:\",w$message,\"for\",fileName)\n      print(msg)      \n    }, error = function(e) {\n      \n      print(e$message)\n      msg <- paste(\"create file \",fileName,sep=\"\")\n      print(msg)\n      \n      #newDF <- addOneColToDF(dailyCapital[i,],\"主力净流入\",c(0),\"净买率\")\n      newDF <- dailyCapital[i,]\n      newDF <- newDF[,-length(newDF)]\n      \n#       print(\"********newDF**********\")\n#       print(length(newDF[i,]))\n#       print(newDF)\n#       print(\"***********************\")\n#       print(dailyCapital[i,])\n#       print(\"***********************\")\n      write.xlsx2(newDF,fileName,row.names=FALSE,append=TRUE,colClasses=uniqueCapColClasses,colIndex=c(1:24),encoding=\"UTF-8\")\n    }, finally = {\n      \n    })\n  }\n}\n\n#将某天的全部交易数据写入到个股的交易数据\nuniqueMarketColClasses<-c(\"Date\",\"character\",\"character\",rep(\"numeric\", 3),rep(\"integer\",2),rep(\"numeric\", 2),\"integer\",rep(\"numeric\", 9),rep(\"integer\",2),\"character\",rep(\"numeric\", 2))\nwriteToUniqueDailyTrade <- function(dailyTrade) {\n  \n  dailyTrade <- na.omit(dailyTrade)\n  date <- dailyTrade[1,1]\n  \n  for(i in 1:nrow(dailyTrade)) {\n  #for(i in 1:1) {\n    path <- getWd()\n    fileName <- paste(path,\"\\\\market\\\\unique\\\\\",dailyTrade[i,2],\".xlsx\",sep=\"\")    \n    result = tryCatch({\n      uniqueFile <- read.xlsx2(fileName, sheetIndex=1,header=TRUE,encoding=\"UTF-8\",colClasses=uniqueMarketColClasses, stringsAsFactors=FALSE,colIndex=c(1:25))\n#       print(paste(\"-------------get file------------\",fileName))\n#       print(uniqueFile)\n#       print(length(uniqueFile[1,]))\n           \n      exist <- which(uniqueFile$日期 == date)\n      if(length(exist)!=0) {\n        print(paste(\"WARNING:get the same date \",date,\" for \",fileName,sep=\"\"))\n        next;\n      }\n      data <- dailyTrade[i,]\n#       print(data)\n#       print(length(data))\n      data <- data[,-(length(data))]\n      #print(\"-----------------------------------\") \n      uniqueFile <- insertRow(uniqueFile,data,nrow(uniqueFile)+1,as.character(nrow(uniqueFile)))\n      colnames(dailyTrade)[1]=\"日期\"\n      #print(paste(\"-------------update date file-----------\",fileName))\n      uniqueFile <- uniqueFile[,-length(uniqueFile)]\n      #print(uniqueFile)\n      #print(\"------------------------------------\")\n      write.xlsx2(uniqueFile,fileName,row.names=FALSE,append=FALSE,colIndex=c(1:26),encoding=\"UTF-8\",colClasses=uniqueMarketColClasses)\n      msg <- paste(\"update file \",fileName,\" with \",data[1,1],\" data\",sep=\"\")\n      print(msg)\n    }, warning = function(w) {\n      msg <- paste(\"get warning:\",w$message,\"for\",fileName)\n      print(msg)\n    }, error = function(e) {\n      print(e$message)\n      msg <- paste(\"create file \",fileName,sep=\"\")\n      print(msg)\n      colnames(dailyTrade)[1]=\"日期\"\n#       print(paste(\"-----------create file-------------\",fileName))\n#       print(dailyTrade[i,])\n#       print(\"------------------------------------\")\n      write.xlsx2(dailyTrade[i,],fileName,row.names=FALSE,append=TRUE,colIndex=c(1:25),encoding=\"UTF-8\",colClasses=uniqueMarketColClasses)\n    }, finally = {\n      \n    })\n  }\n  \n}\n#根据stock id打开某个个股的所有交易数据\nopenDailyTradeFile <- function(stock_id) {\n  fileName <- paste(\".\\\\market\\\\unique\\\\\",stock_id,\".xlsx\",sep=\"\")\n  stockDailyTradeFile <- read.xlsx2(fileName, sheetIndex=1,header=TRUE,encoding=\"UTF-8\",colClasses=c(\"Date\",\"character\",\"character\",rep(\"numeric\", 3),rep(\"integer\",2),rep(\"numeric\", 2),\"integer\",rep(\"numeric\", 9),rep(\"integer\",2),\"character\",rep(\"numeric\", 2)), keepFormulas=FALSE, stringsAsFactors=FALSE)  \n  return(stockDailyTradeFile)\n}\n\n#根据stock id打开某个个股的所有资金流向数据\nopenDailyCapFile <- function(stock_id) {\n  path <- getWd()\n  fileName <- paste(path,\"\\\\capital\\\\unique\\\\\",stock_id,\".xlsx\",sep=\"\")  \n  #stockDailyCapFile <- read.xlsx2(fileName, sheetIndex=1,header=TRUE,encoding=\"UTF-8\",colClasses=c(\"Date\",\"character\",\"character\",rep(\"numeric\", 20),rep(\"integer\",3)), keepFormulas=FALSE, stringsAsFactors=FALSE)  \n  stockDailyCapFile <- read.xlsx2(fileName,sheetIndex=1,header=TRUE, encoding=\"UTF-8\",colClasses=uniqueCapColClasses, stringsAsFactors=FALSE,colIndex=(1:24))\n  return(stockDailyCapFile)  \n}\n\n\n\n#获得某天所有股票的资金流向文件和某天所有股票的交易文件，然后将两文件中的数据做某些交集合并\ncombineCapAndMarketData <- function(dailyCapFile,dailyMarketFile) {\n  dailyCapFile<-na.omit(dailyCapFile)\n  dailyMarketFile<-na.omit(dailyMarketFile)\n  date <- dailyCapFile[1,1]\n  #print(date)\n  for(i in 1:nrow(dailyCapFile)) {\n  #for(i in 1:1) {\n    stockId <- dailyCapFile[i,2]\n    uniqDailyCapFile <- openDailyCapFile(stockId)\n    exist <- which(dailyMarketFile$代码 == stockId)\n    if(length(exist) == 0) {\n      print(paste(\"skip\",stockId,\"for market\\\\unique\\\\ dir\"))\n      next\n    }\n    uniqDailyTradeFile <- openDailyTradeFile(stockId)\n    \n    netBuyingRate <- calNetBuying(uniqDailyTradeFile,uniqDailyCapFile,date)\n    #print(paste(\"netBuyingRate\",netBuyingRate))\n    \n    path <- getWd()\n    fileName <- paste(path,\"\\\\capital\\\\unique\\\\\",stockId,\".xlsx\",sep=\"\")\n    row <- which(uniqDailyCapFile$日期 == date)\n    #print(paste(\"row:\",as.integer(row)))\n    col <- which(names(uniqDailyCapFile) == \"净买率\")\n    #print(paste(\"col:\",as.integer(col)))\n    \n    if(length(row) == 0) {\n      print(paste(\"Warning: can not find date \",date,\" in \",fileName,sep=\"\"))\n      next\n    } else if (length(row) > 1) {\n      print(paste(\"ERROR: find multiple date \",date,\" in \",fileName,sep=\"\"))\n      break\n    }\n    \n    if(length(col) == 0) {\n      print(paste(\"Warning: can not find column 净买率 in \",fileName,sep=\"\"))\n      next\n    } else if (length(col) > 1) {\n      print(paste(\"ERROR: find multiple columns 净买率 in \",fileName,sep=\"\"))\n      break\n    }\n    \n#     wb <- loadWorkbook(fileName)\n#     sheet <- getSheets(wb)\n#     row <- getRows(sheet[[1]],rowIndex=as.integer(row))\n#     print(c(col))\n#     cell <- getCells(row,c(col))\n#     print(cell)\n#     values <- getCellValue(cell)\n#     print(values)\n#     setCellValue(cell,netBuyingRate)\n#     saveWorkbook(wb,fileName)\n  \n   uniqDailyCapFile <- uniqDailyCapFile[,-length(uniqDailyCapFile)]\n   #print(uniqDailyCapFile)\n   uniqDailyCapFile[row,col] <- netBuyingRate\n   #print(paste(\"uniqDailyCapFile[row,col]\",uniqDailyCapFile[row,col]))\n   #write.xlsx2(uniqDailyCapFile,fileName,row.names=FALSE,append=FALSE)\n   write.xlsx2(uniqDailyCapFile,fileName,row.names=FALSE,append=FALSE,colClasses=uniqueCapColClasses,colIndex=c(1:24),encoding=\"UTF-8\")\n  }\n}\n\n#净买率=净流入/流通市值*100\ncalNetBuying <- function(uniqDailyTradeFile,uniqDailyCapFile,date) {  \n  if (uniqDailyTradeFile[1,3] != uniqDailyCapFile[1,3]) {\n    errmsg <- paste(\"the trade file stock id \",uniqDailyTradeFile[1,3], \" is not match to capital file \", uniqDailyCapFile[1,2],sep=\"\")\n    print(errmsg)\n    return()    \n  }\n  \n  tradeDateLine <- subset(uniqDailyTradeFile,uniqDailyTradeFile[,1] == date)  \n  if (length(tradeDateLine) == 0) {\n    errmsg <- paste(\"can not find daily trade line for stock \",uniqDailyTradeFile[1,3],\" in \",date,sep=\"\")\n    print(errmsg)\n    return()\n  } \n  \n  capDateLine <- subset(uniqDailyCapFile,uniqDailyCapFile[,1] == date)\n  if (length(capDateLine) == 0) {\n    errmsg <- paste(\"can not find captital line for stock \",capDateLine[1,3],\" in \",date,sep=\"\")\n    print(errmsg)\n    return()\n  }\n  \n  #流通市值\n  cmv <- tradeDateLine$流通市值\n  #print(cmv)\n  \n  #vol <- tradeDateLine$成交额\n  #print(vol)\n  \n  #净流入\n  ni <- capDateLine$主力净流入\n  #print(ni)\n  \n  if (cmv == 0 || length(cmv) == 0) {\n    netBuyingRate <- 0\n  } else {\n    netBuyingRate <- round((ni/cmv)*100,2)  \n  }\n  \n  #netBuyingRate <- round((ni/vol),2)\n  print(paste(uniqDailyTradeFile[1,2],date,\"净买率:\",netBuyingRate))\n  \n  return(netBuyingRate)\n}\n\nflushData <- function(from, to) {\n  fromDate <- as.Date(from)\n  toDate <- as.Date(to)\n  date <- fromDate\n  while(date <= toDate) {\n    dcf <- openCapitalFile(date)\n    if(!is.null(dcf)) {\n      writeToUniqueCapital(dcf)\n    }\n         \n    dtf <- openHSADailyTradeFile(date)\n    if(!is.null(dtf)) {\n      writeToUniqueDailyTrade(dtf)  \n    }\n    \n    if(!is.null(dcf) && !is.null(dtf)) {\n      combineCapAndMarketData(dcf,dtf)  \n    }    \n    \n    date <- date + 1\n  }\n}\n",
    "created" : 1443540604075.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4103325503",
    "id" : "3C884B93",
    "lastKnownWriteTime" : 1445049639,
    "path" : "C:/xtang/workspace/mystockanalysis/capital.R",
    "project_path" : "capital.R",
    "properties" : {
    },
    "relative_order" : 0,
    "source_on_save" : true,
    "type" : "r_source"
}